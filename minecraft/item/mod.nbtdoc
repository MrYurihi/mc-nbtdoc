mod blockitem;
mod book;
mod bundle;
mod compass;
mod crossbow;
mod debugstick;
mod enchantedbook;
mod firework;
mod fishbucket;
mod head;
mod instrument;
mod knowledgebook;
mod leatherarmor;
mod map;
mod potion;
mod shield;
mod spawnitem;
mod suspiciousstew;

use ::minecraft::util::Slot;
use ::minecraft::util::attribute::Operation;

/// The base NBT of all items
compound ItemBase {
	/// The damage that an item has. Only used for tools, armor, etc
	Damage: int,
	/// Whether the item should be unbreakable
	/// Only used for tools, armor, etc
	Unbreakable: boolean,
	/// A list of the block states that can be destroyed by this item when holding it in adventure mode
	CanDestroy: [string],
	/// A tag that describes the custom model an item will take.  
	/// Gets used by the `custom_model_data` model predicate
	CustomModelData: int,
	/// A list of enchantments that are on the item
	Enchantments: [Enchantment],
	/// Number of levels to add to the cost when using this in an anvil
	RepairCost: int,
	/// Attribute modifiers to apply while this item is being worn, held, etc
	AttributeModifiers: [AttributeModifier],
	/// The display settings of the item
	display: Display,
	/// Bitfield for which flags to hide on an item  
	/// 1 -> `Enchantments`  
	/// 2 -> `AttributeModifiers`  
	/// 4 -> `Unbreakable`  
	/// 8 -> `CanDestroy`  
	/// 16 -> `CanPlaceOn` (for block items)  
	/// 32 -> other misc info  
	/// 64 -> `display.color` (for leather amor)
	/// 128 -> `Trim`
	HideFlags: int,
	/// The trim to apply to the item & armor when worn
	Trim: Trim
}

ItemBase describes minecraft:item;

/// An individual enchantment, with ID and level
compound Enchantment {
	/// Which enchantment is being described
	id: id(minecraft:enchantment),
	/// Which level the enchantment is
	lvl: short @ 0..255
}

/// A single attribute modifier
compound AttributeModifier {
	/// The name of the attribute
	AttributeName: id(minecraft:attribute),
	/// Name of the modifier, has no real effect
	Name: string,
	/// The slot that the modifier is active in
	Slot: Slot,
	/// The modifier operation
	Operation: Operation,
	/// The change in the attribute
	Amount: double,
	/// The UUID of the modifier
	UUID: int[] @ 4
}

/// The display settings of an item
compound Display {
	/// The name of an item, as a JSON text component
	Name: string,
	/// The lore of an item, with each element being a lore line
	Lore: [string]
}

compound Trim {
	/// Gets used by the `trim_type` model predicate via the material item_model_index and armor rendering for the material's `asset_name` for the `armor_trims` atlas
	material: string,
	/// Gets used by armor rendering for the pattern's `asset_id`
	pattern: string
}
