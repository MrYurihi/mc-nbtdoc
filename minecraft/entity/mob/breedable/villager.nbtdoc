use ::minecraft::util::InventoryItem;

compound Villager extends super::Breedable {
	/// The villager's brain
	Brain: Brain,
	/// Whether the villager is willing to breed
	Willing: boolean,
	/// The data associated with the villager and it's skin
	VillagerData: VillagerData,
	/// The gossips the villager has heard
	Gossips: [Gossip],
	/// The tick of the last time the villager has restocked
	LastRestock: long,
	/// The tick of the last time the villager's gossips have decreased in strength
	LastGossipDecay: long,
	/// The number of times the villager has restocked in the past ten minutes
	RestocksToday: int,
	/// The xp the villager has, increases with trading
	Xp: int,
	/// The villager's inventory
	Inventory: [InventoryItem] @ 0..8,
	/// The trade offers the villager has
	Offers: Offers
}

compound Brain {
	/// The villager's memories
	memories: Memories
}

compound Memories {
	/// The location of the villager's meeting point
	"minecraft:meeting_point": PositionMemory,
	/// The location of the villager's home
	"minecraft:home": PositionMemory,
	/// The location of the villager's job site
	"minecraft:job_site": PositionMemory,
	/// The tick when the villager last slept
	"minecraft:last_slept": TickMemory,
	/// The tick when the villager last woke up
	"minecraft:last_woken": TickMemory,
	/// The tick when the villager last worked
	"minecraft:last_worked_at_poi": TickMemory
}

compound PositionMemory {
	/// The position value
	value: PositionMemoryValue
}

compound PositionMemoryValue {
	/// The coordinates of the location in [x, y, z]
	pos: int[] @ 3,
	/// The dimension of the location
	dimension: id(minecraft:dimension)
}

compound TickMemory {
	/// The tick value
	value: long
}

compound VillagerData {
	/// The level of the villager  
	/// Used for trading and badge rendering
	level: int,
	/// The profession of the villager
	profession: id(minecraft:villager_profession),
	/// The type of the villager
	type: id(minecraft:villager_type)
}

compound Gossip {
	/// The type of the gossip
	Type: GossipType,
	/// The value of the gossip
	Value: int,
	/// The UUID of the gossip target
	Target: int[] @ 4
}

enum(string) GossipType {
	MajorNegative = "major_negative",
	MinorNegative = "minor_negative",
	MajorPositive = "major_positive",
	MinorPositive = "minor_positive", 
	Trading = "trading"
}

compound Offers {
	/// The trades the villager has to offer
	Recipes: [Recipe]
}

compound Recipe {
	/// Whether the villager should reward experience for using this trade
	rewardExp: boolean,
	/// The maximum number of uses for this trade before the villager has to restock
	maxUses: int,
	/// The number of times this trade has been used since the villager last restocked
	uses: int,
	/// The first item the villager buys
	buy: InventoryItem,
	/// The second item the villager buys
	buyB: InventoryItem,
	/// The item the villager sells
	sell: InventoryItem,
	/// The amount of xp the villager gains from the trade
	xp: int,
	/// The multiplier on the demand price adjuster
	priceMultiplier: float,
	/// A modifier added to the original price of the first cost item
	specialPrice: int,
	/// The price adjuster of the first cost item based on demand
	demand: int
}

Villager describes minecraft:entity[minecraft:villager];