use ::minecraft::util::BlockState;
use ::minecraft::util::PotionEffect;
use ::minecraft::util::InventoryItem;

compound ArrowBase extends super::ProjectileBase {
	/// Whether the projectile should do critical damage
	crit: boolean,
	/// The damage the projectile should do
	damage: double,
	/// The block the arrow is in
	inBlockState: BlockState,
	/// Whether the projectile is in the ground
	inGround: boolean,
	/// The number of ticks since the projectile last moved
	life: short,
	/// How players can pick up the projectile
	pickup: Pickup,
	/// The number of entities to pass through
	PierceLevel: byte,
	/// The number of ticks until this arrow can be picked up by players.
	/// This is set to 7 when the arrow initially hits a block
	shake: byte,
	/// Whether the projectile was shot from a crossbow
	ShotFromCrossbow: boolean,
	/// The sound event to play when the projectile hits something
	SoundEvent: string,
	/// The item that will be picked up when collecting the projectile
	item: InventoryItem
}

enum(byte) Pickup {
	None = 0,
	Any = 1,
	Creative = 2
}

compound Arrow extends ArrowBase {
	/// The color of the arrow  
	/// calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive
	Color: int,
	/// The custom potion effects to give to the hit entity
	custom_potion_effects: [PotionEffect],
	/// The name of the default potion effect
	Potion: id(minecraft:potion),
	/// The color of the arrow's particles  
	/// calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive
	CustomPotionColor: int
}

compound SpectralArrow extends ArrowBase {
	/// The number of ticks the glowing effect lasts
	Duration: int
}

compound Trident extends ArrowBase {
	/// Whether the trident has damaged an entity already
	DealtDamage: boolean
}

Arrow describes minecraft:entity[minecraft:arrow];
SpectralArrow describes minecraft:entity[minecraft:spectral_arrow];
Trident describes minecraft:entity[minecraft:trident];
